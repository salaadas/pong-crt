// Disabling these so we have z-ordering layer.
// // @@NoDepthWrite
// // @@NoDepthTest

COMM vec4 scale_color;
COMM vec2 uv0;

#ifdef VERTEX_SHADER

uniform mat4 transform;

layout (location = 0) in vec3 vert_position;
layout (location = 1) in vec4 vert_color_scale;
layout (location = 3) in vec2 vert_uv0;

void main()
{
    vec4 pos = transform * vec4(vert_position, 1);

    scale_color = vert_color_scale;

    gl_Position = pos;
    uv0 = vert_uv0;
}

#endif




#ifdef FRAGMENT_SHADER

out vec4 output_color;
layout (binding = 0) uniform sampler2D diffuse_texture;

uniform vec2 blur_direction;

void main()
{
    vec2 dir = blur_direction;

    // @Cleanup: Maybe use textureLOD() instead? 
    vec4 sum = texture(diffuse_texture, uv0) * 0.2270270270;
    sum += texture(diffuse_texture, vec2(uv0.x - 4.0 * dir.x, uv0.y - 4.0 * dir.y)) * 0.0162162162;
    sum += texture(diffuse_texture, vec2(uv0.x - 3.0 * dir.x, uv0.y - 3.0 * dir.y)) * 0.0540540541;
    sum += texture(diffuse_texture, vec2(uv0.x - 2.0 * dir.x, uv0.y - 2.0 * dir.y)) * 0.1216216216;
    sum += texture(diffuse_texture, vec2(uv0.x - 1.0 * dir.x, uv0.y - 1.0 * dir.y)) * 0.1945945946;
    sum += texture(diffuse_texture, vec2(uv0.x + 1.0 * dir.x, uv0.y + 1.0 * dir.y)) * 0.1945945946;
    sum += texture(diffuse_texture, vec2(uv0.x + 2.0 * dir.x, uv0.y + 2.0 * dir.y)) * 0.1216216216;
    sum += texture(diffuse_texture, vec2(uv0.x + 3.0 * dir.x, uv0.y + 3.0 * dir.y)) * 0.0540540541;
    sum += texture(diffuse_texture, vec2(uv0.x + 4.0 * dir.x, uv0.y + 4.0 * dir.y)) * 0.0162162162;

    output_color = sum * scale_color;
}

#endif
