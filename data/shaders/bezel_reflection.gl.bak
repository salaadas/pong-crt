//
// It would be best if we could apply the crt filter once and reuse that for
// better reflection accuracy because now, we are not doing any of the crt filter
// for the reflection.
//

// Disabling these so we have z-ordering layer.
// // @@NoDepthWrite
// // @@NoDepthTest

COMM vec4 scale_color;
COMM vec2 uv0;

COMM vec2 uv_in_overlay_space;
COMM vec2 game_without_bezel_size_in_bezel_space;
COMM vec2 game_bottom_left_in_bezel_space;

#ifdef VERTEX_SHADER

uniform mat4 transform;

uniform vec2 game_plus_bezel_size;
uniform vec2 game_without_bezel_size;
uniform vec2 bezel_center_in_overlay_space;
uniform vec2 overlay_size;

layout (location = 0) in vec3 vert_position;
layout (location = 1) in vec4 vert_color_scale;
layout (location = 3) in vec2 vert_uv0;

void main()
{
    vec4 pos = transform * vec4(vert_position, 1);

    scale_color = vert_color_scale;

    gl_Position = pos;
    uv0 = vert_uv0;

    vec2 pos_in_overlay_space = uv0 * game_plus_bezel_size + (bezel_center_in_overlay_space - 0.5 * game_plus_bezel_size);
    uv_in_overlay_space = pos_in_overlay_space / overlay_size;

    game_without_bezel_size_in_bezel_space = game_without_bezel_size / game_plus_bezel_size;
    game_bottom_left_in_bezel_space = 0.5 * (vec2(1) - game_without_bezel_size_in_bezel_space);
}

#endif




#ifdef FRAGMENT_SHADER

// @@include "common_fragment.glh"

out vec4 output_color;

layout (binding = 0) uniform sampler2D diffuse_texture; // This is the game texture.
layout (binding = 2) uniform sampler2D blend_texture; // This is the blurred game texture.
layout (binding = 4) uniform sampler2D overlay_texture; // This is the texture for the computer frame and also the background.

#define REFLECTION_ADJUST_VIEW 0.0   // This is for debugging.
#define REFLECTION_STRENGTH    0.25

vec2 do_curve(vec2 uv)
{
    // @Cleanup: We want to revisit this to take in parameters
    // because we may want to change the overlay background later on.

    uv = (uv - 0.5) * 2.0; // This is to convert uv to [-1..1]
    uv *= 1.085; // @Hardcode:

    float x_scale = abs(uv.y) / 5.5; // @Hardcode: The denominator values are arbitrary.
    float y_scale = abs(uv.x) / 5.0;

    uv.x *= 1.0 + (x_scale * x_scale); // Squaring 'x_scale' and 'y_scale' to amplify the effect.
    uv.y *= 1.0 + (y_scale * y_scale);

    uv *= 0.5; // Convert uv back to [0..1].
    uv += 0.5;

    uv *= 0.92; // Magic numbers.
    uv += 0.04;

    return uv;
}

void main()
{
    vec2 my_uv = uv0;
    vec4 game_screen_texture_color = texture(diffuse_texture, my_uv);

    vec4 linear_overlay_texture_color = texture(overlay_texture, uv_in_overlay_space);
    vec3 overlay_texture_color = convert_color_to_gamma_22_space(linear_overlay_texture_color.xyz);
    overlay_texture_color      = apply_filmic_tone_map(overlay_texture_color);

    vec4 final_color = vec4(overlay_texture_color, linear_overlay_texture_color.w);
    vec3 reflection_color;

    vec2 game_size_t = game_without_bezel_size_in_bezel_space;
    float abs_half_x = abs(my_uv.x - 0.5);
    float abs_half_y = abs(my_uv.y - 0.5);
    vec2 original_uv = my_uv; // Stash this because we will modify my_uv in the horizontal check.

    //
    // Horizontal check.
    //
    if (abs_half_x >= (0.5 * game_size_t.x) && // If the pixel is horizontally outside the in-game screen.
        abs_half_x <= 0.5 &&                   // If the pixel is horizontally within the bezel bound.
        abs_half_y <= 0.5)                     // If the pixel is vertically within the bezel and in-game bound.
    {
        if (my_uv.x >= 0.5) my_uv.x = 1.0 - my_uv.x + game_size_t.x + game_bottom_left_in_bezel_space.x;
        else                my_uv.x = 1.0 - my_uv.x - game_size_t.x - game_bottom_left_in_bezel_space.x;

        reflection_color = mix(texture(blend_texture, my_uv).xyz, vec3(0, 1, 0), REFLECTION_ADJUST_VIEW);
        // reflection_color = mix(reflection_color, game_screen_texture_color.xyz, game_screen_texture_color.w);

        reflection_color *= 1.0 - smoothstep(0.5 * game_size_t.y - 0.1, 0.5 * game_size_t.y, abs(my_uv.y - 0.5));
        final_color.xyz = clamp(final_color.xyz + REFLECTION_STRENGTH * reflection_color, 0.0, 1.0);
    }

    //
    // Vertical check.
    //
    if (abs_half_y >= (0.5 * game_size_t.y) && // If the pixel is vertically outside the in-game screen.
        abs_half_y <= 0.5 &&                   // If the pixel is vertically within the bezel bound.          
        abs_half_x <= 0.5)                     // If the pixel is horizontally within the bezel and in-game bound.
    {
        if (my_uv.y >= 0.5) my_uv.y = 1.0 - my_uv.y + game_size_t.y + game_bottom_left_in_bezel_space.y;
        else                my_uv.y = 1.0 - my_uv.y - game_size_t.y - game_bottom_left_in_bezel_space.y;

        reflection_color = mix(texture(blend_texture, vec2(original_uv.x, my_uv.y)).xyz, vec3(0, 1, 0), REFLECTION_ADJUST_VIEW);
        // reflection_color = mix(reflection_color, game_screen_texture_color.xyz, game_screen_texture_color.w);

        reflection_color *= 1.0 - smoothstep(0.5 * game_size_t.x - 0.1, 0.5 * game_size_t.x, abs(original_uv.x - 0.5));
        final_color.xyz = clamp(final_color.xyz + REFLECTION_STRENGTH * reflection_color, 0.0, 1.0);
    }

    // final_color = mix(mix(game_screen_texture_color, final_color, final_color.a), game_screen_texture_color, game_screen_texture_color.a);

    final_color = mix(game_screen_texture_color, final_color, final_color.a);

    output_color = scale_color * final_color;
}

#endif
