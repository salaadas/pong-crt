// @@NoBlend

COMM vec4 scale_color;
COMM vec2 uv0;

#ifdef VERTEX_SHADER

uniform mat4 transform;
uniform vec4 material_color;

layout (location = 0) in vec3 vert_position;
layout (location = 1) in vec4 vert_color_scale; // We ignore this because we use the material color instead....
layout (location = 2) in vec3 vert_normal;
layout (location = 3) in vec2 vert_uv0;

void main()
{
    vec4 pos = transform * vec4(vert_position, 1.0);

    vec3 light_dir_a = vec3(+0.7, -0.2, -0.7);
    vec3 light_dir_b = vec3( 0.0,  0.0,  1.0);

    float light_dot_a = dot(vert_normal, light_dir_a);
    float light_dot_b = dot(vert_normal, light_dir_b);

    light_dot_a = max(light_dot_a, 0);
    light_dot_b = max(light_dot_b, 0);

    vec3 diffuse = material_color.xyz;
    // vec3 diffuse = vert_color_scale.xyz;

    scale_color.xyz  = diffuse * 0.25; // Ambient
    scale_color.xyz += diffuse * light_dot_a * 0.5;
    scale_color.xyz += light_dot_a * 0.15;

    diffuse.x *= 0.85; // Make diffuse blue to simulate a sky light sort of.
    diffuse.y *= 0.85;
    scale_color.xyz += diffuse * light_dot_b * 0.35;
    scale_color.xyz += light_dot_b * 0.1;

    scale_color.w = vert_color_scale.w;

    gl_Position = pos;
    uv0 = vert_uv0;
}

#endif




#ifdef FRAGMENT_SHADER

out vec4 output_color;
layout (binding = 0) uniform sampler2D diffuse_texture;

void main()
{
    vec4 color         = scale_color;
    vec4 texture_color = texture2D(diffuse_texture, uv0);

    output_color   = color * texture_color;
    output_color.w = 1; // @Cleanup: Just in case....
}

#endif
