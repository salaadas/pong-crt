// @@DiffuseTextureClamped
// // @@NoDepthTest

COMM vec4 scale_color;
COMM vec2 uv0;


#ifdef VERTEX_SHADER

uniform mat4 transform;

layout (location = 0) in vec3 vert_position;
layout (location = 1) in vec4 vert_color_scale;
layout (location = 3) in vec2 vert_uv0;

void main()
{
    vec4 pos = transform * vec4(vert_position, 1);

    scale_color = vert_color_scale;

    gl_Position = pos;
    uv0 = vert_uv0;
}

#endif





#ifdef FRAGMENT_SHADER

out vec4 output_color;
uniform sampler2D diffuse_texture;

void main()
{
    vec4 color = scale_color;

    vec2 uv = uv0;
    // uv.y = 1 - uv.y;   // Uncomment this if font has y reversal

    vec4 texture_color = vec4(1.0, 1.0, 1.0, texture(diffuse_texture, uv).r);
    output_color = color * texture_color;
}

#endif
